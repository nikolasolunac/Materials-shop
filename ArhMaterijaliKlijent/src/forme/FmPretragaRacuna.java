/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import apstraktno.AbstractJDialog;
import domen.OpstiDomenskiObjekat;
import domen.Racun;
import gui.komponente.ModelTabeleRacuni;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author SOLUNAC
 */
public class FmPretragaRacuna extends AbstractJDialog {

    /**
     * Creates new form FmPretragaRacuna
     */
    public FmPretragaRacuna(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        kontroler.KontrolerKlijent.getInstance().setFmPretrazivanjeRacuna(this);
        popuniTabeluSvimRacunima();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtxtKriterijum = new javax.swing.JTextField();
        jbtnPretrazi = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblRacuni = new javax.swing.JTable();
        jbtnDetalji = new javax.swing.JButton();
        jbtnObrisi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Unesite kriterijum pretrage:");

        jbtnPretrazi.setText("Pretraži");
        jbtnPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPretraziActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("(id računa/datum računa)");

        jtblRacuni.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtblRacuni);

        jbtnDetalji.setText("Detalji");
        jbtnDetalji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDetaljiActionPerformed(evt);
            }
        });

        jbtnObrisi.setText("Obriši");
        jbtnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnObrisiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtxtKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnPretrazi))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtnObrisi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbtnDetalji))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnPretrazi))
                .addGap(1, 1, 1)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnDetalji)
                    .addComponent(jbtnObrisi))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPretraziActionPerformed
        // TODO add your handling code here:
        try {
            String kriterijum = jtxtKriterijum.getText().trim();
            kontroler.KontrolerKlijent.getInstance().setKriterijumPretrage(kriterijum);
            if (kriterijum.isEmpty()) {
                popuniTabeluSvimRacunima();
            } else {
                List<OpstiDomenskiObjekat> lista = kontroler.KontrolerKlijent.getInstance().pretraziRacune(kriterijum);
                if (!lista.isEmpty()) {
                    postaviModelTabele(lista);
                    prikaziPorukuObavestenja("Sistem je našao račune po zadatoj vrednosti!");
                } else {
                    prikaziPorukuGreske("Sistem ne može da nađe račune po zadatoj vrednosti!");
                    postaviModelTabele(new ArrayList<OpstiDomenskiObjekat>());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jbtnPretraziActionPerformed

    private void jbtnDetaljiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDetaljiActionPerformed
        // TODO add your handling code here:
        preuzmiPodatkeSelektovanogRacuna(util.Util.SK_PRIKAZ);
    }//GEN-LAST:event_jbtnDetaljiActionPerformed

    private void jbtnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnObrisiActionPerformed
        // TODO add your handling code here:
        int red = jtblRacuni.getSelectedRow();
        if (red != -1) {
            try {
                Racun racun = ((ModelTabeleRacuni) jtblRacuni.getModel()).vratiRacun(red);
                kontroler.KontrolerKlijent.getInstance().obrisiRacun(racun.getRacunID() + "");
                prikaziPorukuObavestenja("Sistem je obrisao račun!");
                osvezi();
            } catch (Exception e) {
                prikaziPorukuGreske("Ssitem ne može da obriše račun!");
            }
        } else {
            prikaziPorukuGreske("Niste izabrali nijedan račun!");
        }
    }//GEN-LAST:event_jbtnObrisiActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDetalji;
    private javax.swing.JButton jbtnObrisi;
    private javax.swing.JButton jbtnPretrazi;
    private javax.swing.JTable jtblRacuni;
    private javax.swing.JTextField jtxtKriterijum;
    // End of variables declaration//GEN-END:variables
    
    private void popuniTabeluSvimRacunima() {
        try {
            List<OpstiDomenskiObjekat> lista1 = kontroler.KontrolerKlijent.getInstance().vratiListuRacuna();
            postaviModelTabele(lista1);

        } catch (Exception e) {
            e.printStackTrace();
            //prikaziPorukuGreske("Došlo je do greške prilikom učitavanja računa!");
        }
    }

    private void postaviModelTabele(List<OpstiDomenskiObjekat> lista) {
        jtblRacuni.setModel(new ModelTabeleRacuni(lista));
    }

    private void prikaziPorukuGreske(String poruka) {
        JOptionPane.showMessageDialog(this, poruka, "Greška!", JOptionPane.ERROR_MESSAGE);
    }

    private void prikaziPorukuObavestenja(String poruka) {
        JOptionPane.showMessageDialog(this, poruka, "Obaveštenje!", JOptionPane.INFORMATION_MESSAGE);

    }

    @Override
    public void osvezi() {
        try {
            String kriterijum = kontroler.KontrolerKlijent.getInstance().getKriterijumPretrage();
            if (kriterijum.isEmpty()) {
                popuniTabeluSvimRacunima();
            } else {
                List<OpstiDomenskiObjekat> lista = kontroler.KontrolerKlijent.getInstance().pretraziRacune(kriterijum);
                if (!lista.isEmpty()) {
                    postaviModelTabele(lista);
                } else {
                    postaviModelTabele(new ArrayList<OpstiDomenskiObjekat>());
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void preuzmiPodatkeSelektovanogRacuna(int sk) {
      int red = jtblRacuni.getSelectedRow();
        if (red != -1) {
            try {
                Racun izabraniRacun = ((ModelTabeleRacuni) jtblRacuni.getModel()).vratiRacun(red);
                List<OpstiDomenskiObjekat> lista = kontroler.KontrolerKlijent.getInstance().pretraziRacune(izabraniRacun.getRacunID() + "");
                if(!lista.isEmpty()) {
                    Racun racunSaPodacima = (Racun) lista.get(0);
                    prikaziPorukuObavestenja("Sistem je pronašao račun!");
                    kontroler.KontrolerKlijent.getInstance().setAktivan_sk(sk);
                    kontroler.KontrolerKlijent.getInstance().setSelektovanRacun(racunSaPodacima);
                    new FmUnosRacuna(null, true).setVisible(true);
                } else {
                    prikaziPorukuGreske("Sistem ne može da nađe račun!");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {

            prikaziPorukuGreske("Niste odabrali nijedan račun!");
        }
    }

}
